I made the assumption that I needed to create an HBox (radioBox) for the radio buttons in the PigPane with a spacing of 20, in order for the radio buttons to layout successfully with a small amount of padding in between. This allowed me to get teh same result as the provided jar file game.

I worked under the assumption that the javadoc comment error for @see in the ComputerPane class would resolve once the AbstractPlayer class was built correctly, but that appears to be wrong. I was getting an error because of the "-" inside the parentheses, so I removed those to get it to work.

I made the assumption that I needed to remove the shared variables and methods that were not name (since we are using name as a param for Human) and move them to the AbstractPlayer, but then when I looked again at the code that was left inside the 2 players, there was still redundancy in the takeTurn method of each, so I decided to move the logic inside the for loop or inside the method itself into a protected class in the abstract method that had valid and invalid roll private classes to remove that redundancy. There were 2 differences for the computer that I had to take care of (ie the return and the isMyTurn = true) that I needed to consider, which is why I created the provate classes to support it.

Since the getIsMyTurn method was moved into the abstract class, I added a setIsMyTurn method in the abstract class, because the for loop in the Computer Player's take turn method in the ComputerPlayer class ends, requiring the turn to be over, so I needed a way to control that in the abstract class. So, I made the assumption that in refactoring the code to remove redundancy that I could add that setter in the abstract class.